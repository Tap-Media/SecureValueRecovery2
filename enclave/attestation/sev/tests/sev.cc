// Copyright 2023 Signal Messenger, LLC
// SPDX-License-Identifier: AGPL-3.0-only

//TESTDEP gtest
//TESTDEP attestation/sev
//TESTDEP util
//TESTDEP env
//TESTDEP env/test
//TESTDEP context
//TESTDEP minimums
//TESTDEP metrics
//TESTDEP proto
//TESTDEP protobuf-lite
//TESTDEP libsodium
//TESTDEP boringssl

#include <gtest/gtest.h>
#include "env/env.h"
#include "util/log.h"
#include "util/hex.h"
#include "attestation/sev/sev.h"

namespace svr2::attestation::sev {

class AttestSEVTest : public ::testing::Test {
 protected:
  static void SetUpTestCase() {
    env::Init(env::SIMULATED);
  }

  void SetUp() {
    auto [valid_evidence, err1] = util::HexToBytes("020000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000100000003000000000008a801000000000000000000000000000000696e697400000000000000000000000000000000000000000000000000000000e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b85516a477d17fac7cf617cfa6f36740cf93ff35b250d5a521557c9a9eef8d8734e1c9283a80056580423a930a95f0f095b50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ed7ee3f34108b6250dca3f07b93681ceb29ecb3c34240b9a7ec2a690e4b67aaaffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03000000000008a800000000000000000000000000000000000000000000000055bb3ecf018b58380db708ce8e2988acd91e68bf614b83992c6b1a895d69396ed623faec113de4a80d3ae6f31eda70bca9f9638270e9ca211af2a08e933b754603000000000008a8043401000434010003000000000008a8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c856983743487d04611eec0cd58e83a8a8a1070d6925d69868cb2a2b0d71497474c0fc5271a537fd021a7ee76830df55000000000000000000000000000000000000000000000000965fb2ad7044d66ef04f0c474ec9f088526ce6f7ec200638cb08e5581233e2b81ca7062962d68b2e360b4009a33a66fe
    CHECK(err1 == error::OK);
    auto [valid_endorsements, err2] = util::HexToBytes("");
    CHECK(err2 == error::OK);
    attestation_.set_evidence(valid_evidence);
    attestation_.set_endorsements(valid_endorsements);
    valid_timestamp_ = 1686770565;
  }

  e2e::Attestation attestation_;
  util::UnixSecs valid_timestamp_;
};

TEST_F(AttestSEVTest, Validate) {
  auto [report, err1] = ReportFromUnverifiedAttestation(attestation_);
  ASSERT_EQ(error::OK, err1);
  auto [data, err2] = DataFromVerifiedAttestation(report, attestation_, valid_timestamp_);
  ASSERT_EQ(error::OK, err2);
}

TEST_F(AttestSEVTest, SigningDetectsBitFlips) {
  auto [report, err1] = ReportFromUnverifiedAttestation(attestation_);
  ASSERT_EQ(error::OK, err1);
  auto start = reinterpret_cast<uint8_t*>(&report);
  auto end = reinterpret_cast<uint8_t*>(&report.signature);
  size_t size = end - start;
  for (size_t i = 0; i < size; i++) {
    for (uint8_t b = 1; b > 0; b<<=1) {
      e2e::Attestation a = attestation_;
      (*a.mutable_evidence())[i] ^= b;
      auto [data, err] = DataFromVerifiedAttestation(report, a, valid_timestamp_);
      ASSERT_NE(err, error::OK);
    }
  }
}

TEST_F(AttestSEVTest, SigningPastTimestamp) {
  auto [report, err1] = ReportFromUnverifiedAttestation(attestation_);
  ASSERT_EQ(error::OK, err1);
  auto [data, err2] = DataFromVerifiedAttestation(report, attestation_, valid_timestamp_ - 86400 * 7);
  ASSERT_EQ(error::AttestationSEV_CertificateChainVerify, err2);
}

TEST_F(AttestSEVTest, InvalidASKSignature) {
  SevSnpEndorsements sse;
  ASSERT_TRUE(sse.ParseFromString(attestation_.endorsements()));
  (*sse.mutable_ask_der())[sse.ask_der().size() - 1] ^= 1;  // mess up signature on ASK
  ASSERT_TRUE(sse.SerializeToString(attestation_.mutable_endorsements()));
  auto [report, err1] = ReportFromUnverifiedAttestation(attestation_);
  ASSERT_EQ(error::OK, err1);
  auto [data, err2] = DataFromVerifiedAttestation(report, attestation_, valid_timestamp_);
  ASSERT_EQ(error::AttestationSEV_CertificateChainVerify, err2);
}

TEST_F(AttestSEVTest, InvalidVCEKSignature) {
  SevSnpEndorsements sse;
  ASSERT_TRUE(sse.ParseFromString(attestation_.endorsements()));
  (*sse.mutable_vcek_der())[sse.vcek_der().size() - 1] ^= 1;  // mess up signature on VCEK
  ASSERT_TRUE(sse.SerializeToString(attestation_.mutable_endorsements()));
  auto [report, err1] = ReportFromUnverifiedAttestation(attestation_);
  ASSERT_EQ(error::OK, err1);
  auto [data, err2] = DataFromVerifiedAttestation(report, attestation_, valid_timestamp_);
  ASSERT_EQ(error::AttestationSEV_CertificateChainVerify, err2);
}

}  // namespace svr2::attestation::sev
